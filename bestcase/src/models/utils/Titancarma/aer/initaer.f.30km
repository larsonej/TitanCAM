       subroutine initaer
c
c
c  @(#) initaer.f  Jensen  Oct-1995
c  This routine initializes the particle concentrations
c
c  Argument list input:
c    None.
c
c  Argument list output:
c    None.
c
c
c  Include global constants and variables
c
      include 'globaer.h'
c
c
c  Declare local variables
c
      dimension pc30cld(NBIN)
      character*(25) partfile
c
c
c  Define formats
c
    1 format(1pe13.6)
    2 format(i3,2(1pe13.6))
    3 format(i3,1pe13.6)
    6 format(5e20.13)
   21 format(5(1pe12.2,3x))
   22 format(4(1pe12.2,3x))
   24 format(1pe14.8)
c
c
c  Announce entry to this routine
c
      if( DEBUG ) write(LUNOPRT,'(/,a)') 'Enter initaer'
c
c
c  Initialize particle number densities 
c  Core mass is assumed to be 100% of particle mass
c
      do ielem = 1,NELEM
       ig = igelem(ielem)
       ip = ienconc(ig)
       do j = 1,NBIN
        do iz = 1,NZ
         do iy = 1,NY
          do ix = 1,NX

           if( ielem .eq. ip )then
c
c  Particle number concentration [#/cm^3]
c
             pc(ix,iy,iz,j,ielem) = SMALL_PC

           elseif( itype(ielem) .eq. I_COREMASS )then
c
c  Core mass concentration [g/cm^3]
c
             pc(ix,iy,iz,j,ielem) = pc(ix,iy,iz,j,ip) *
     $                              rmass(j,ig) * FIX_COREF

           elseif( itype(ielem) .eq. I_CORE2MOM )then
c
c  Second moment of core mass distribution [ (g/cm^3)^2 ]
c
             pc(ix,iy,iz,j,ielem) = pc(ix,iy,iz,j,ip) *
     $                              (rmass(j,ig)*FIX_COREF)**2

           endif
 
          enddo
         enddo
        enddo
       enddo
      enddo
c
c
c
c  Set initial particle concentrations from file# cf368 - which is at steady-state 
c  down to ~20 km
c
c  ..particle file
c
        partfile='Files/Output/ptclcf368.p'
c
      open(unit=4,file=partfile,status='old')
          read(4,24) time
      do k = 1,NZ
        do j = 1,NBIN

          read(4,21) rjunk,rjunk,pc3(k,j,1),pc3(k,j,2),pc3(k,j,3)
        enddo

      enddo

c     read in cloud concentrations from 30 km for use in ftoppart calculation
      do j=1,NBIN
        read(4,21) rjunk,rjunk,rjunk,pc30cld(j),rjunk
      enddo

      close(unit=4)
c
c
c  Specify fluxes at top and bottom of model
c  [#/cm^2/s for particle number types, g/cm^2/s for core mass, etc.]
c
      do ixy = 1,NXY
        do ie = 1, NELEM
          do j = 1,NBIN
            ftoppart(ixy,j,ie) = 0.
            fbotpart(ixy,j,ie) = 0.
          enddo
        enddo
      enddo
c
c  Read in fluxes for tholin particles from file generated by Titan1 model
c
c    Tholin
        open(unit=2,file='../data/flux30_tho',status='old')
        do ibin=1,35
          read (2,6) diffld,advfld,difflu,pc30,pc28
          ftoppart(1,ibin,1) = (diffld+advfld)*pc30
     $                          - difflu*pc28
        enddo
        close(unit=2)

c    Cloud
        open(unit=2,file='../data/flux30_cld',status='old')
c       read(2,2) ijunk,difflu,rjunk
c       read(2,2) ijunk,rjunk,diffld
        do ibin=1,NBIN
          read(2,6) diffld,advfld,difflu,pc30,pc28
          ftoppart(1,ibin,2) = (diffld+advfld)*pc30
     $                          - difflu*pc28
        enddo
        close(unit=2)

c    Core mass
        open(unit=2,file='../data/flux30_cor',status='old')
        do ibin=1,NBIN
          read (2,6) diffld,advfld,difflu,pc30,pc28
          ftoppart(1,ibin,3) = (diffld+advfld)*pc30
     $                          - difflu*pc28
        enddo
        close(unit=2)

c
c
c  Scale particle concentrations and boundary fluxes from
c  cartesian coordinates to coordinate system specified by <igrid>
c
c
c  Pick indices for top and bottom layers
c
      if( igridv .eq. I_CART )then
        iztop = NZ
        izbot = 1
      else
        iztop = 1
        izbot = NZ
      endif

      do ie = 1, NELEM
        do j = 1,NBIN

          do ixyz = 1,NXYZ
            pc3(ixyz,j,ie) = pc3(ixyz,j,ie) * 
     $                       ( xmet3(ixyz)*ymet3(ixyz)*zmet3(ixyz) )
          enddo

          do ixy = 1,NXY
            ftoppart(ixy,j,ie) = ftoppart(ixy,j,ie) *
     $                           ( xmet2(ixy,iztop)*ymet2(ixy,iztop) )
            fbotpart(ixy,j,ie) = fbotpart(ixy,j,ie) *
     $                           ( xmet2(ixy,izbot)*ymet2(ixy,izbot) )
          enddo

        enddo
      enddo
c
c
c  Return to caller with particle concentrations initialized.
c
      return
      end
