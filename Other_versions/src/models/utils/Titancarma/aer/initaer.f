       subroutine initaer
c
c
c  @(#) initaer.f  Jensen  Oct-1995
c  This routine initializes the particle concentrations
c
c  Argument list input:
c    None.
c
c  Argument list output:
c    None.
c
c
c  Include global constants and variables
c
      include 'globaer.h'
c
c
c  Declare local variables
c
      dimension pc100(NCCNBIN),pc98(NCCNBIN)
c
c
c  Define formats
c
    1 format(1pe13.6)
    3 format(i4,2x,f6.2,35(2x,1pe13.6))
    4 format(/,'Particle concentrations for ',a,'(initaer)',//,
     $  a3, 1x, a11, 4x, a25 /)
    6 format(4e20.13)
   21 format(5(1pe12.2,3x))  
c
c
c  Announce entry to this routine
c
      if( DEBUG ) write(LUNOPRT,'(/,a)') 'Enter initaer'
c
c
c  Initialize particle number densities 
c  Core mass is assumed to be 100% of particle mass
c
      do ielem = 1,NELEM
       ig = igelem(ielem)
       ip = ienconc(ig)
       do j = 1,NBIN
        do iz = 1,NZ
         do iy = 1,NY
          do ix = 1,NX

           if( ielem .eq. ip )then
c
c  Particle number concentration [#/cm^3]
c
             pc(ix,iy,iz,j,ielem) = SMALL_PC

           elseif( itype(ielem) .eq. I_COREMASS ) then
c
c  Core mass concentration [g/cm^3]
c
             pc(ix,iy,iz,j,ielem) = pc(ix,iy,iz,j,ip) *
     $                              rmass(j,ig) * FIX_COREF

           elseif( (itype(ielem) .eq. I_GROWCORE) .or.
     $             (itype(ielem) .eq. I_VOLCORE) ) then
c
c  Core mass concentration [g/cm^3]
c
             pc(ix,iy,iz,j,ielem) = pc(ix,iy,iz,j,ip) *
     $                              rmass(j,ig) * FIX_COREF**2

           elseif( itype(ielem) .eq. I_CORE2MOM )then
c
c  Second moment of core mass distribution [ (g/cm^3)^2 ]
c
             pc(ix,iy,iz,j,ielem) = pc(ix,iy,iz,j,ip) *
     $                              (rmass(j,ig)*FIX_COREF)**2

           endif
 
          enddo
         enddo
        enddo
       enddo
      enddo
c
c  For cloud model, initialize tholin 
      if( zl3(NZ) .le. 100.d5 ) then
c
c  Set initial tholin particle concentration as steady-state concentration 
c  profile from (Titan1) aerosol model run for 500 yrs with 2 km bin spacing
c  [Ref: Toon et al., Icarus, 1992]
c
       do k = 1,50  !!NZ
        do j = 1,41 !!NBIN
          
          read(LUNIAER1,21) rjunk,rjunk,pc(1,1,k,j,1),rjunk,rjunk

c    Sensitivity Test - 1/10 tholin
cc        pc(1,1,k,j,1) = pc(1,1,k,j,1) / 10.
cc        if(k.eq.1.and.j.eq.1) 
cc   $      write(*,*) 'decreasing initial tholin !!!!!!!!!!!!!'

          if( j.gt.NCCNBIN ) pc(1,1,k,j,1) = SMALL_PC
        enddo
       enddo

c     read in tholin concentrations from 98 & 100 km for calculation of top flux
       do j=1,35
        read(LUNIAER2,1) pc98(j)      
       enddo 
       do j=1,35
        read(LUNIAER2,1) pc100(j)      
c
c    Sensitivity Test - 1/10 tholin
cc      pc98(j) = pc98(j) / 10.
cc      pc100(j) = pc100(j) / 10.
cc      if(j.eq.1) write(*,*) 'decreasing tholin top flux !!!!!!!!!!!'
c
       enddo 

      endif !initialize tholin from steady-state model
      close(unit=LUNIAER1)  !Note: Still need to close these files here
      close(unit=LUNIAER2)  !      since they were opened in {init}

c  Write out initial tholin values for graphing
        write(LUNOPRT,4) elemname(1),
     $              'iz','zc','pc [#/cm^3] tholin, all bins'
      do k = 1,NZ
        write(LUNOPRT,3) k,zc3(k)/1.d5,(pc3(k,j,1),j=1,NBIN)
      enddo
c
c
c  Specify fluxes at top and bottom of model
c  [#/cm^2/s for particle number types, g/cm^2/s for core mass, etc.]
c
      do ixy = 1,NXY
        do ie = 1, NELEM
          do j = 1,NBIN
            ftoppart(ixy,j,ie) = 0.
            fbotpart(ixy,j,ie) = 0.
          enddo
        enddo
      enddo

c  For cloud model, read in fluxes for tholin particles from file
c  generated by Titan1 model
      if( zl3(NZ) .le. 100.d5 ) then
       do ibin = 1,35
        read (LUNIFLX,6) diffld,advfld,difflu,fbot
        ftoppart(1,ibin,1) = (diffld+advfld)*pc100(ibin)
     $                          - difflu*pc98(ibin)
       enddo
      endif
      close(unit=LUNIFLX)
c
c
c  Sensitivity Test: Increase tholin by 10x
c     do k = 1,NZ
c       do j = 1,35

c         pc(1,1,k,j,1) = 10.*pc(1,1,k,j,1)

c       enddo
c     enddo
c
c  Scale particle concentrations and boundary fluxes from
c  cartesian coordinates to coordinate system specified by <igrid>
c
c
c  Pick indices for top and bottom layers
c
      if( igridv .eq. I_CART )then
        iztop = NZ
        izbot = 1
      else
        iztop = 1
        izbot = NZ
      endif

      do ie = 1, NELEM
        do j = 1,NBIN

          do ixyz = 1,NXYZ
            pc3(ixyz,j,ie) = pc3(ixyz,j,ie) * 
     $                       ( xmet3(ixyz)*ymet3(ixyz)*zmet3(ixyz) )
          enddo

          do ixy = 1,NXY
            ftoppart(ixy,j,ie) = ftoppart(ixy,j,ie) *
     $                           ( xmet2(ixy,iztop)*ymet2(ixy,iztop) )
            fbotpart(ixy,j,ie) = fbotpart(ixy,j,ie) *
     $                           ( xmet2(ixy,izbot)*ymet2(ixy,izbot) )
          enddo

        enddo
      enddo
c
c
c  Specify the values of <pc> assumed just above(below) the top(bottom)
c  of the model domain.
c
      do ie = 1, NELEM
        do j = 1,NBIN
          do ixy=1,NXY
            pc_topbnd(ixy,j,ie) = pc2(ixy,NZ,j,ie)
            pc_botbnd(ixy,j,ie) = pc2(ixy,1,j,ie)
          enddo
        enddo
      enddo
c
c
c  Return to caller with particle concentrations initialized.
c
      return
      end
