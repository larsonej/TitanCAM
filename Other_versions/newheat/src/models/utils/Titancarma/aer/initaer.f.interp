       subroutine initaer
c
c
c  @(#) initaer.f  Jensen  Oct-1995
c  This routine initializes the particle concentrations
c
c  Argument list input:
c    None.
c
c  Argument list output:
c    None.
c
c
c  Include global constants and variables
c
      include 'globaer.h'
c
c
c  Declare local variables
c
      dimension pc100(NBIN)
c
c
c  Define formats
c
    1 format(1pe13.6)
    6 format(4e20.13)
c
c
c  Announce entry to this routine
c
      if( DEBUG ) write(LUNOPRT,'(/,a)') 'Enter initaer'
c
c
c  Initialize particle number densities 
c  Core mass is assumed to be 100% of particle mass
c
      do ielem = 1,NELEM
       ig = igelem(ielem)
       ip = ienconc(ig)
       do j = 1,NBIN
        do iz = 1,NZ
         do iy = 1,NY
          do ix = 1,NX

           if( ielem .eq. ip )then
c
c  Particle number concentration [#/cm^3]
c
             pc(ix,iy,iz,j,ielem) = SMALL_PC

           elseif( itype(ielem) .eq. I_COREMASS )then
c
c  Core mass concentration [g/cm^3]
c
             pc(ix,iy,iz,j,ielem) = pc(ix,iy,iz,j,ip) *
     $                              rmass(j,ig) * FIX_COREF

           elseif( itype(ielem) .eq. I_CORE2MOM )then
c
c  Second moment of core mass distribution [ (g/cm^3)^2 ]
c
             pc(ix,iy,iz,j,ielem) = pc(ix,iy,iz,j,ip) *
     $                              (rmass(j,ig)*FIX_COREF)**2

           endif
 
          enddo
         enddo
        enddo
       enddo
      enddo
c
c
c
c  Set initial tholin particle concentration as steady-state concentration from
c  (Titan1) aerosol model [see Toon et al., Icarus, 1992]
c
      do k = 1,NZ
        do j = 1,35
          
          read (LUNIAER,1) pc(1,1,k,j,1)

c           if( pc(1,1,k,j,1) .lt. SMALL_PC )
c    $        pc(1,1,k,j,1) = SMALL_PC
 
        enddo
      enddo

c     do k = 1,NZ,5
c       do j = 1,35
c         read (LUNIAER,1) pc(1,1,k,j,1)
c           pc(1,1,k,j,1) = pc(1,1,k,j,1)/5.
c           do kk = k+1,k+4
c             pc(1,1,kk,j,1) = pc(1,1,k,j,1)
c             if( pc(1,1,kk,j,1) .lt. SMALL_PC )
c    $          pc(1,1,kk,j,1) = SMALL_PC
c           enddo
c           if( pc(1,1,k,j,1) .lt. SMALL_PC )
c    $        pc(1,1,k,j,1) = SMALL_PC
c       enddo
c     enddo

c     read in tholin concentrations from 100 km for interpolation of 
c     top 10 km
      do j=1,35
        read(LUNIAER,1) pc100(j)      
      enddo 

c     do k = 1,NZ,5
c       do j = 1,35
c         deltay = 1.d6   !zl(1,1,k+5) - zl(1,1,k)

c         if(k+5 .gt.  NZ) then
c           deltax = pc100(j) - pc(1,1,k,j,1)
c         else
c           deltax = pc(1,1,k+5,j,1) - pc(1,1,k,j,1)
c         endif

c         slope = deltay / deltax

c         do ik = k+1,k+4
c           pc(1,1,ik,j,1) = pc(1,1,k,j,1) +
c    $                        ( zl(1,1,ik) - zl(1,1,k) ) / slope
c           if( pc(1,1,ik,j,1) .lt. SMALL_PC )
c    $        pc(1,1,ik,j,1) = SMALL_PC

c         enddo
c       enddo
c     enddo

c       close(unit=LUNIAER)

        do k=1,NZ
          do j=36,NBIN
                pc(1,1,k,j,1) = SMALL_PC
          enddo
        enddo

c       do k=1,NZ
c         do j=1,NBIN
c           if(pc(1,1,k,j,2) .gt. SMALL_PC) 
c    $       print *,'pc in initaer:  ',zl3(k),r(j,2),pc(1,1,k,j,2)
c            print *, pc(1,1,k,j,1)
c         enddo
c       enddo
c
c
c  Specify fluxes at top and bottom of model
c  [#/cm^2/s for particle number types, g/cm^2/s for core mass, etc.]
c
      do ixy = 1,NXY
        do ie = 1, NELEM
          do j = 1,NBIN
            ftoppart(ixy,j,ie) = 0.
            fbotpart(ixy,j,ie) = 0.
          enddo
        enddo
      enddo
c
c  Read in fluxes for tholin particles from file generated by Titan1 model
c
      do ibin = 1,35
        read (LUNIFLX,6) diffld,advfld,difflu,fbot
        ftoppart(1,ibin,1) = (diffld+advfld)*pc100(ibin)
     $                          - difflu*pc3(NZ,ibin,1)
      enddo
      close(unit=LUNIFLX)
c
c
c  Sensitivity Test: Increase tholin by 10x
c     do k = 1,NZ
c       do j = 1,35

c         pc(1,1,k,j,1) = 10.*pc(1,1,k,j,1)

c       enddo
c     enddo
c
c  Scale particle concentrations and boundary fluxes from
c  cartesian coordinates to coordinate system specified by <igrid>
c
c
c  Pick indices for top and bottom layers
c
      if( igridv .eq. I_CART )then
        iztop = NZ
        izbot = 1
      else
        iztop = 1
        izbot = NZ
      endif

      do ie = 1, NELEM
        do j = 1,NBIN

          do ixyz = 1,NXYZ
            pc3(ixyz,j,ie) = pc3(ixyz,j,ie) * 
     $                       ( xmet3(ixyz)*ymet3(ixyz)*zmet3(ixyz) )
          enddo

          do ixy = 1,NXY
            ftoppart(ixy,j,ie) = ftoppart(ixy,j,ie) *
     $                           ( xmet2(ixy,iztop)*ymet2(ixy,iztop) )
            fbotpart(ixy,j,ie) = fbotpart(ixy,j,ie) *
     $                           ( xmet2(ixy,izbot)*ymet2(ixy,izbot) )
          enddo

        enddo
      enddo
c
c
c  Return to caller with particle concentrations initialized.
c
      return
      end
