      subroutine initres
c
c
c  @(#) initres.f  McKie  Oct-1995
c  This routine initializes the model from a restart that
c  was created in a previous run.  Common blocks are
c  returned to the state they were in when the requested
c  restart time values were output in the previous run.
c
c  Argument list input:
c    None.
c
c  Argument list output:
c    None.
c
c
c  Include global constants and variables
c
      include 'globaer.h'
c
c
c  Define formats
c
    1 format(/,'Attempting to restart from file: ',a)
    2 format('Looking for restart time index: ',i6)
    3 format('Unexpected common block value for ',a,': ',i6)
    4 format('Unexpected common block value for ',a,': ',a)
    5 format('Input restart file time:  itime: ',i6,3x,'time: ',f12.2)
    6 format('Error--Declared dimensions not big enough:',/,
     $       'NX, NY, NZ: ',3(1x,i6),/,
     $       'MAXNRAD, NELEM: ',2(1x,i6),/,
     $       'NX, NY, NZ, maxnrad, maxNELEM: ', 5(1x,i6))
    7 format('Requested restart time index ',i6,' found.')
    8 format('Error--Cant find requested restart time ',i6,
     $       ' on input restart file.')
    9 format(/,'Doing a restart initialization from a prev run')
   10 format('Aborting.')
c
c
c  Announce entry to this routine
c
      if( DEBUG ) write(LUNOPRT,'(/,a)') 'Enter initres'
c
c
c  Report that a restart is being done
c
      write(LUNOPRT,9)
c
c
c  Report input restart file name
c
      call dblank(resifil, ns)
      write(LUNOPRT,1) resifil(1:ns)
c
c
c  Report requested restart timestep index
c
      write(LUNOPRT,2) ibtime
c
c
c  Open input restart file
c
      open(unit=LUNIRES,file=resifil,status='old',
     $     form='unformatted')
c
c
c  Input contents of common /aer1/ & check for safety marker value
c
 2100 continue
       read(LUNIRES,end=8100,err=8100)
     $   time, dtime, itime,
     $   NX, NY, NZ, NBIN, NGROUP, NELEM,
     $   igelem, itype, nelemg,
     $   ienconc, icoag,
     $   NXY, NXYZ, NPC4, NPC5,
     $   ifall, icoagop, icollec, do_coag, do_error,
     $   iaer1
       if( iaer1 .ne. ISAFETY )then
        write(LUNOPRT,3) 'iaer1', iaer1
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Report restart time that is being input
c
       write(LUNOPRT,5) itime, time
c
c
c  Ensure that declared array dimensions are big enough
c
       if( ( NX .gt. NX ) .or.
     $     ( NY .gt. NY ) .or.
     $     ( NZ .gt. NZ ) .or.
     $     ( nrad .gt. MAXNRAD ) .or.
     $     ( NELEM .gt. NELEM )   )then
        write(LUNOPRT,6) NX, NY, NZ, MAXNRAD, NELEM,
     $                   NX, NY, NZ, nrad, NELEM
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /aer1s/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $   simtitle,
     $   caer1s
       if( caer1s .ne. CSAFETY )then
        write(LUNOPRT,4) 'caer1s', caer1s
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /aer2/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $   rmassmin, rmrat,
     $   r, rmass,
     $   vol, dr,
     $   dm, dv,
     $   rmassup, rup,
     $   rhop,
     $   iaer2
       if( iaer2 .ne. ISAFETY )then
        write(LUNOPRT,3) 'iaer2', iaer2
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /aer3/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $   pc,
     $   iaer3
       if( iaer3 .ne. ISAFETY )then
        write(LUNOPRT,3) 'iaer3', iaer3
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /rad3/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $   rad_stuff,
     $   irad3
       if( irad3 .ne. ISAFETY )then
        write(LUNOPRT,3) 'irad3', irad3
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /aer4/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $   pcl,
     $   coagls, coagpd,
     $   iaer4
       if( iaer4 .ne. ISAFETY )then
        write(LUNOPRT,3) 'iaer4', iaer4
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /rad4/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $   rad_other,
     $   irad4
       if( irad4 .ne. ISAFETY )then
        write(LUNOPRT,3) 'irad4', irad4
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /aer5/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $   ckernel,
     $   pkernel,
     $   volx,
     $   ilow,
     $   jlow,
     $   iup,
     $   jup,
     $   npairl,
     $   npairu,
     $   iaer5
       if( iaer5 .ne. ISAFETY )then
        write(LUNOPRT,3) 'iaer5', iaer5
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /aer6/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $   iglow,
     $   jglow,
     $   igup,
     $   jgup,
     $   iaer6
       if( iaer6 .ne. ISAFETY )then
        write(LUNOPRT,3) 'iaer6', iaer6
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /aer7/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $  ishape, eshape, bpm,
     $  vf, re,
     $  iaer7
       if( iaer7 .ne. ISAFETY )then
        write(LUNOPRT,3) 'iaer7', iaer7
        write(LUNOPRT,10)
        stop
       endif
c
c
c  Input contents of common /aer8/ & check for safety marker value
c
       read(LUNIRES,end=8100,err=8100)
     $  alt, alt_mid,
     $  p, rhoa,
     $  t, rmu,
     $  iaer8
       if( iaer7 .ne. ISAFETY )then
        write(LUNOPRT,3) 'iaer8', iaer8
        write(LUNOPRT,10)
        stop
       endif
c
c
c  If current restart file time is not the requested one, go try next time
c
      if( itime .ne. ibtime ) goto 2100
c
c
c  Close input restart file
c
      close(unit=LUNIRES)
c
c
c  Report that requested restart info has been input
c
      call dblank(resifil, ns)
      write(LUNOPRT,7) itime
c
c
c  Return to caller with restart initialization complete
c
      return
c
c
c  Report that requested restart time was not found on input file & quit
c
 8100 continue
      write(LUNOPRT,8) ibtime
      write(LUNOPRT,10)
      stop
c
      end
