       subroutine psolve(ibin,ielem)
c
c
c  @(#) psolve.f  Jensen  Oct-1995
c  This routine calculates new particle concentrations.
c
c   The basic form from which the solution is derived is
c   ( new_value - old_value ) / dtime = source_term - loss_rate*new_value
c
c  Modified  Sep-1997  (McKie)
c    New particle concentrations due to coagulation processes
c    were moved to the csolve routine.  Csolve is called to
c    update particle concentrations due to coagulation.
c    This new psolve now updates particle concentrations due
c    to the faster calcs of the non-coag microphysical processes.
c
c  Modified  Sep-1997  (McKie)
c  To calculate at one spatial point per call.
c  Globals <ix>, <iy>, <iz>, <ixy>, <ixyz> specify current spatial pt's indices.
c
c  Argument list input:
c    ielem, ibin
c
c  Argument list output:
c    None.
c
c
c  Include global constants and variables
c
      include 'globaer.h'
c
c
c  Announce entry to this routine
c
      if( DEBUG ) write(LUNOPRT,'(/,a)') 'Enter psolve'
c
c
c  Define current group & particle number concentration element indices
c
      igroup = igelem(ielem)
      iepart = ienconc(igroup)
c
c
c  Compute total production rate
c
        ppd = rnucpe(ibin,ielem) + rprod(ixyz)   !should be changed so that 
     $      + growpe(ibin,ielem)                 !rprod is only added for 13 A
     $      + evappe(ibin,ielem)                 !tholin particles
c
c
c  Sum up nucleation loss rates
c
        rnuclgtot = 0.
        do igto = 1,NGROUP
          rnuclgtot = rnuclgtot + rnuclg(ibin,igroup,igto)
        enddo
c
c
c  Compute total loss rate
c
        pls = rnuclgtot
     $      + growlg(ibin,igroup) 
     $      + evaplg(ibin,igroup) 

c       if(zl3(ixyz).le.30.0d5) pls = pls + 1.069d-8             ! rainout rate
c       if(zl3(ixyz).le.20.0d5) pls = pls + 1.8335d-9            ! rainout rate
        
c       if(zl3(ixyz).lt.30.0d5) pls = pls + 3.1688d-8            ! year rainout time
        if(zl3(ixyz).lt.30.0d5) pls = pls + 3.8580d-7            ! 30 day rainout time

c
c
c  Update net particle number concentration during current timestep
c  due to production and loss rates
c
        pc_before = pc3(ixyz,ibin,ielem)
        pc3(ixyz,ibin,ielem) = ( pc3(ixyz,ibin,ielem) + dtime*ppd ) /
     $                         ( ONE + pls*dtime )

c
c
c  Prevent particle concentrations from going to 0
c
        ip = ienconc(igroup)
        if( ielem .eq. ip )then

          pc3(ixyz,ibin,ielem) = max( pc3(ixyz,ibin,ielem), SMALL_PC )

        else

          if( itype(ielem) .eq. I_COREMASS .or.
     $        itype(ielem) .eq. I_VOLCORE )then

            small_val = SMALL_PC*rmass(ibin,igroup)*FIX_COREF

          elseif( itype(ielem) .eq. I_CORE2MOM )then

            small_val = SMALL_PC*(rmass(ibin,igroup)*FIX_COREF)**2

          endif

          if( pc3(ixyz,ibin,ip) .le. SMALL_PC .or.
     $        pc3(ixyz,ibin,ielem) .lt. small_val )then

            pc3(ixyz,ibin,ielem) = small_val

          endif

        endif
c
c
c  Return to caller with new particle number concentrations.
c
      return
      end
