29c29
<       include 'implicit.h'
---
>       include 'precision.h'
31a32,37
> c  Include symbolic constants and common blocks shared between aerosol and
> c  radiation models
> c
>       include 'aerad.h'
> c
> c
35c41
<       parameter( PROGNAM = 'Ames Aerosol Model' )
---
>       parameter( PROGNAM = 'CARMA' )
41c47
<       parameter( PROGTAG = '1.12' )
---
>       parameter( PROGTAG = '2.0' )
50c56
< c  Define integer safety marker value placed at end of common blocks
---
> c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
52d57
<       parameter( ISAFETY = 12345 )
53a59
> c  Start of user-defined symbolic constants (all of which are array dimensions)
55d60
< c  Define character safety marker value placed at end of common blocks
57,58c62
<       character*(5) CSAFETY
<       parameter( CSAFETY = '12345' )
---
> c  Define # grid pts in x, y, z directions
59a64,66
>       parameter( NX = 1 )
>       parameter( NY = 1 )
>       parameter( NZ = NZ_AERAD )
61,62d67
< c  Define double precision 1.0 to be multiplied by literal constants
< c  that are embedded within parentheses.
64c69
<       parameter( ONE = 1.d0 )
---
> c  Define maximum of NX or NY
65a71
>       parameter( NXORNY = 1 )
67d72
< c  Define logical unit number for output print file
69c74
<       parameter( LUNOPRT = 7 )
---
> c  Define # x, y direction grid box boundaries
71c76,77
<       parameter( LUNOCPRT = 6)
---
>       parameter( NXP1 = NX + 1 )
>       parameter( NYP1 = NY + 1 )
73d78
< c  Define logical unit number for input restart file
75c80
<       parameter( LUNIRES = 11 )
---
> c  Define maximum of NXP1 or NYP1
76a82
>       parameter( NXORNYP1 = 2 )
78d83
< c  Define logical unit number for output restart file
80c85
<       parameter( LUNORES = 12 )
---
> c  Define # particle radius bins
81a87
>       parameter( NBIN = NBIN_AERAD )
83d88
< c  Define logical unit number for output history file
85c90
<       parameter( LUNOHIS = 13 )
---
> c  Define # particle elements 
86a92
>       parameter( NELEM = 3 )
88d93
< c  Define logical unit number for input initial conditions
90c95
<       parameter( LUNIINI = 14 )
---
> c  Define # particle groups
91a97
>       parameter( NGROUP = NGROUP_AERAD )
93d98
< c  Define logical unit number for input initial conditions
95c100
<       parameter( LUNOSTEP = 10 )
---
> c  Define # solutes
96a102
>       parameter( NSOLUTE = 1 )
98d103
< c  Define logical unit number for input temperature values
100c105
<       parameter( LUNITAEM = 17 )
---
> c  Define # gases
101a107
>       parameter( NGAS = 1 )
103d108
< c  Define logical unit number for temporary output file
105c110
<       parameter( LUNOTEMP = 18 )
---
> c  Define # solar wavelength bins
106a112
>       parameter( NSOL = NSOL_AERAD )
108d113
< c  Define logical unit number for aerosol fluxes input file
110c115
<       parameter( LUNIFLX = 19 )
---
> c  Define # infrared wavelength bins
111a117
>       parameter( NIR = NIR_AERAD )
113d118
< c  Define logical unit number for particle concentration input file
115c120
<       parameter( LUNIAPC = 23 )
---
> c  Define total # wavelength bins
116a122
>       parameter( NWAVE = NWAVE_AERAD )
118d123
< c  Define logical unit number for timestep output file
120c125,127
<       parameter( LUNOTME = 21 )
---
> c  Define particle number concentration [ # / cm^3 ]
> c  used to decide whether to bypass microphysical processes:
> c  set it to SMALL_PC to never bypass the calculations.
121a129
>       parameter( FEW_PC = SMALL_PC )
123d130
< c  Define logical unit number for growth rate output file
125c132,133
<       parameter( LUNOGRT = 22 )
---
> c  Define core fraction (for core mass and second moment) used
> c  when particle number concentrations are limited to SMALL_PC
126a135
>       parameter( FIX_COREF = ONE * 0.001 )
128d136
< c  Define logical unit number for US Standard Atmosphere 
130c138
<       parameter( LUNIUSA = 15 )
---
> c  End of user-defined symbolic constants
131a140
> c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
133d141
< c  Define logical unit number for eddy diffusion coefficients
135c143,145
<       parameter( LUNIDKV = 16 )
---
> c  The remaining symbolic constants will need no attention from most
> c  users (unless extending the model capabilities or simulating other than
> c  a terrestrial atmosphere)
137d146
< c  Define max # grid pts in x, y, z directions
139,141c148
<       parameter( MAXNX = 1 )
<       parameter( MAXNY = 1 )
<       parameter( MAXNZ = 60 )
---
> c  Define # vertical grid box boundaries, including top & bottom
142a150,151
>       parameter( NZP1 = NZ + 1 )
>       parameter( NZRADP1 = NZ_RAD + 1 )
144d152
< c  Define maximum of MAXNX or MAXNY
146c154,155
<       parameter( MAXNXORNY = 1 )
---
> c  Define # components of variables with 3 spatial dimensions
> c   (used for collapsing first few dimensions in some calcs)
147a157,161
>       parameter( NXY = NX * NY )
>       parameter( NXYZ = NXY * NZ )
>       parameter( NXYZP1 = NXY * NZP1 )
>       parameter( NXYZRAD = NXY * NZ_RAD )
>       parameter( NXYZRADP1 = NXY * NZRADP1 )
149,150d162
< c  Define max elements of variables with 3 spatial dimensions
< c   (used for collapsing first few dimensions in some calcs)
152,153c164,165
<       parameter( MAXNXY = MAXNX * MAXNY )
<       parameter( MAXNXYZ = MAXNXY * MAXNZ )
---
> c  Define # components of pc() in first 4 and 5 dimensions
> c   (used for collapsing dimensions of <pc> in some calcs)
154a167,168
>       parameter( NPC4 = NXYZ * NBIN )
>       parameter( NPC5 = NPC4 * NELEM )
156d169
< c  Define max # particle radius bins
158c171
<       parameter( MAXNBINS = 60 )
---
> c  Define integer safety marker value placed at end of common blocks
159a173
>       parameter( ISAFETY = 12345 )
161d174
< c  Define max # particle elements 
163c176
<       parameter( MAXNELEM = 3 )
---
> c  Define character safety marker value placed at end of common blocks
164a178,179
>       character*(5) CSAFETY
>       parameter( CSAFETY = '12345' )
166d180
< c  Define max # particle groups
168c182
<       parameter( MAXNGRP = 2 )
---
> c  Define logical unit number for output print file
169a184
>       parameter( LUNOPRT = LUNOPRT_AERAD )
171,172d185
< c  Define max # components of pc() in first 4 and 5 dimensions
< c   (used for collapsing dimensions of <pc> in some calcs)
174,175c187
<       parameter( MAXNPC4 = MAXNXYZ * MAXNBINS )
<       parameter( MAXNPC5 = MAXNPC4 * MAXNELEM )
---
> c  Define logical unit number for time step info output
176a189
>       parameter( LUNOSTEP = LUNOSTEP_AERAD )
178d190
< c  Define max # solutes
180c192
<       parameter( MAXNSOLUTE = 1 )
---
> c  Define logical unit number for input restart file
181a194
>       parameter( LUNIRES = LUNIRES_AERAD )
183d195
< c  Define max # gases
185c197
<       parameter( MAXNGAS = 1 )
---
> c  Define logical unit number for output restart file
186a199,211
>       parameter( LUNORES = LUNORES_AERAD )
> c
> c
> c  Define logical unit number for output history file
> c
>       parameter( LUNOHIS = LUNOHIS_AERAD )
> c
> c
> c  Define logical unit number for radiation submodel print output
> c
>       parameter( LUNORAD = LUNORAD_AERAD )
> c
> c
201a227,235
> c  composition specification
> c
>       parameter( I_H2SO4 = 0 )
>       parameter( I_WATER = 1 )
>       parameter( I_ICE = 2 )
>       parameter( I_MIXEDWAT = 3 )
> c
> c
> c  Define values of flag used for particle element
207c241,242
<       parameter( I_CORE2MOM = 3 )
---
>       parameter( I_VOLCORE = 3 )
>       parameter( I_CORE2MOM = 4 )
213,214c248,253
<       parameter( I_DROPACT = 1 )
<       parameter( I_AERFREEZ = 1 )
---
>       parameter( I_DROPACT = 6 )
>       parameter( I_AERFREEZE = 1 )
>       parameter( I_DROPFREEZE = 2 )
>       parameter( I_MIXEDFREEZE = 3 )
>       parameter( I_MIXEDMELT = 4 )
>       parameter( I_ICEMELT = 5 )
217c256
< c  Define values of flag used specify direction in
---
> c  Define values of flag used to specify direction in
224c263,265
< c  Define triple-point temperature [ K ]
---
> c  Define values of symbols used to specify horizontal & vertical grid type.
> c   Grid selection is made by defining each of the variables
> c   <igridv> and <igridh> to one of the grid types known to the model.
225a267,293
> c   Possible values for igridv:
> c       I_CART    cartesian
> c       I_SIG     sigma
> c
> c    Possible values for igridh:
> c       I_CART   cartesian
> c       I_LL     longitude_latitude
> c       I_LC     lambert_conformal
> c       I_PS     polar_stereographic
> c       I_ME     mercator
> c
>       parameter( I_CART = 1 )
>       parameter( I_SIG = 2 )
>       parameter( I_LL = 3 )
>       parameter( I_LC = 4 )
>       parameter( I_PS = 5 )
>       parameter( I_ME = 6 )
> c
> c
> c  Define values of flag used to specify calculation of solar zenith angle
> c
>       parameter( I_FIXED = 0 )
>       parameter( I_DIURNAL = 1 )
> c
> c
> c  Define triple-point temperature (K)
> c
233a302,307
> c  Define degrees to radian & radian to degrees factors [unitless]
> c
>       parameter( DEG2RAD = PI / 180. )
>       parameter( RAD2DEG = 180. / PI )
> c
> c
264c338
< c  Define reference pressure [ dynes / cm^2 ]
---
> c  Define reference pressure, e.g. for potential temp calcs [ dyne / cm^2 ]
268a343,347
> c  Define conversion factor for mb to cgm [ dyne / cm^2 ] units
> c
>       parameter( RMB2CGS = 1000.d+0 )
> c
> c
299,313d377
< c  Define small particle number concentration [ # / cm^3 ]
< c
<       parameter( SMALL_PC = 1.d-50 )
< c
< c
< c  Define value slightly < 1.0 to test for total evaporation [ dimensionless ]
< c
<       parameter( ALMOST_ONE = ONE - 1.d-10 )
< c
< c
< c  Define value for maximum exponential argument [ dimensionless ]
< c
<       parameter( POWMAX = 3.d+2 )
< c
< c
328,330c392,397
< c   nprint    # of timesteps between print reports
< c   nhist     # of timesteps between history output
< c   nrest     # of timesteps between restart output 
---
> c   nprint    # of timesteps between print reports (used when > 0)
> c   nhist     # of timesteps between history output (used when > 0)
> c   nrest     # of timesteps between restart output (used when > 0)
> c   pprint    time period between print reports  (used when nprint < 0)
> c   phist     time period between history outputs (used when nhist < 0)
> c   prest     time period between restart outputs (used when nrest < 0)
336,337d402
< c   iniifil   Name of input initialization file
< c   trhoifil  Name of input temperatures and densities file
339c404,405
< c   usaifil   Name of US Standard Atmosphere file
---
> c   radofil   Name of radiation submodel print output file
> c   trhoifil  Name of input temperatures and densities file
344a411,413
> c   do_print  .t. if print output during timestepping is desired
> c   do_hist   .t. if history output during timestepping is desired
> c   do_rest   .t. if restart output during timestepping is desired
346d414
<       character*(50) usaifil
351d418
<       character*(50) iniifil
352a420
>       character*(50) radofil
359c427,429
< 
---
>       logical do_print
>       logical do_hist
>       logical do_rest
362a433
>      $  pprint, phist, prest,
363a435
>      $  do_print, do_hist, do_rest,
367c439
<      $  usaifil,prtofil, resifil, resofil, hisofil, iniifil, stepofil,
---
>      $  prtofil, resifil, resofil, hisofil, stepofil, radofil,
373c445
< c  Declare global common blocks for actual model grid structures
---
> c  Declare global common blocks for model grid
375,387c447,476
< c
< c   nx         Actual # grid nodes in x direction 
< c   ny         Actual # grid nodes in y direction 
< c   nz         Actual # grid nodes in z direction 
< c   nbins      Actual # mass bins 
< c   ngroups    Actual # groups 
< c   nelem      Actual # elements (total) 
< c   nxy        # elements in first 2 dimensions of pc() to be used
< c   nxyz       # elements in first 3 dimensions of pc() to be used
< c   npc4       # elements in first 4 dimensions of pc() to be used
< c   npc5       # elements in first 5 dimensions of pc() to be used
< c   ngas       Actual # gases                                        {setupgrow}
< c   nsolute    Actual # solutes                                      {setupgrow}
---
> c   dom_llx    Domain limit, lower left x coordinate                 {initatm}
> c   dom_lly    Domain limit, lower left y coordiante                 {initatm}
> c   dom_urx    Domain limit, upper right x coordinate                {initatm}
> c   dom_ury    Domain limit, upper right y coordinate                {initatm}
> c   rlon0      center longitude for LC, PS, LL projections           {initatm}
> c   rlat0      true latitude for ME projection                       {initatm}
> c   rlat1      #1 true latitude for LC projection                    {initatm}
> c   rlat2      #2 true latitude for LC projection                    {initatm}
> c   hemisph    +1.=southern, -1.=northern hemisphere for PS, LC proj {initatm}
> c   igridv     flag to specify desired vertical grid coord system    {initatm}
> c   igridh     flag to specify desired horizontal grid coord system  {initatm}
> c   zl         Altitude at top of layer                              {initatm}
> c   zlold      Altitude at top of layer at start of time step
> c   zc         Altitude at layer mid-point                           {initatm}
> c   zcold      Altitude at layer mid-point at start of time step
> c   xc         Horizontal position at center of box                  {initatm}
> c   yc         Horizontal position at center of box                  {initatm}
> c   xl         Horizontal position at lower edge of box              {initatm}
> c   yl         Horizontal position at lower edge of box              {initatm}
> c   xu         Horizontal position at upper edge of box              {initatm}
> c   yu         Horizontal position at upper edge of box              {initatm}
> c   dx         Horizontal grid spacing                               {initatm}
> c   dy         Horizontal grid spacing                               {initatm}
> c   dz         Thickness of vertical layers                          {initatm}
> c   xmet       Horizontal ds/dx (ds is metric distance)              {initatm}
> c   ymet       Horizontal ds/dy (ds is metric distance)              {initatm}
> c   zmet       Vertical ds/dz (ds is metric distance)                {initatm}
> c   zmetl      Vertical ds/dz at beginning of time-step              
> c   rlon,rlat  Longitude, latitude [deg] at each horiz grid point    {initatm}
> c   gridname   Text description of horiz & vert grid coord system    {initatm}
389a479,481
>       character*(80) gridname
>       character*(5) caer1s
> c
391,392c483,493
<      $  nx, ny, nz, nbins, ngroups, nelem, nxy, nxyz, npc4, npc5,
<      $  ngas, nsolute,
---
>      $  dom_llx, dom_lly, dom_urx, dom_ury,
>      $  rlon0, rlat0, rlat1, rlat2, hemisph,
>      $  zl(NX,NY,NZP1), zc(NX,NY,NZ),
>      $  zlold(NXYZP1), zcold(NXYZ),
>      $  xc(NX,NY,NZ), xl(NX,NY,NZ), xu(NX,NY,NZ),
>      $  yc(NX,NY,NZ), yl(NX,NY,NZ), yu(NX,NY,NZ),
>      $  dx(NX,NY,NZ), dy(NX,NY,NZ), dz(NX,NY,NZ),
>      $  xmet(NX,NY,NZ), ymet(NX,NY,NZ), zmet(NX,NY,NZ),
>      $  zmetl(NX,NY,NZ), 
>      $  rlon(NX,NY), rlat(NX,NY),
>      $  igridv, igridh, 
394a496,498
>       common /aer1s/
>      $  gridname,
>      $  caer1s
395a500,519
> c
> c  Declare alias names for grid stuff with first 2, 3 dimensions treated linearly
> c
>       dimension zl2(NXY,NZP1), zl3(NXYZP1)
>       dimension zc2(NXY,NZ), zc3(NXYZ)
>       dimension dz2(NXY,NZ), dz3(NXYZ)
>       dimension xc2(NXY,NZ), xc3(NXYZ)
>       dimension yc2(NXY,NZ), yc3(NXYZ)
>       dimension xl2(NXY,NZ), xl3(NXYZ)
>       dimension yl2(NXY,NZ), yl3(NXYZ)
>       dimension xu2(NXY,NZ), xu3(NXYZ)
>       dimension yu2(NXY,NZ), yu3(NXYZ)
>       dimension dx2(NXY,NZ), dx3(NXYZ)
>       dimension dy2(NXY,NZ), dy3(NXYZ)
>       dimension xmet2(NXY,NZ), xmet3(NXYZ)
>       dimension ymet2(NXY,NZ), ymet3(NXYZ)
>       dimension zmet2(NXY,NZ), zmet3(NXYZ)
>       dimension zmetl2(NXY,NZ), zmetl3(NXYZ)
> c
> c
409a534
> c   icomp       Particle compound specification array               {setupbins}
422,427c547,552
< c   itbndpart  Top boundary condition flag for particles             {init}
< c   ibbndpart  Bottom boundary condition flag for particles          {init}
< c   itbndgas   Top boundary condition flag for gas                   {init}
< c   ibbndgas   Bottom boundary condition flag for gas                {init}
< c   itbndtheta Top boundary condition flag for potential temp.       {init}
< c   ibbndtheta Bottom boundary condition flag for otential temp.     {init}
---
> c   itbnd_pc    Top boundary condition flag for particles             {init}
> c   ibbnd_pc    Bottom boundary condition flag for particles          {init}
> c   itbnd_gc    Top boundary condition flag for gas                   {init}
> c   ibbnd_gc    Bottom boundary condition flag for gas                {init}
> c   itbnd_ptc   Top boundary condition flag for potential temp.       {init}
> c   ibbnd_ptc   Bottom boundary condition flag for potential temp.    {init}
438c563
< c   do_error   If .true. then do error trapping for debugging 
---
> c   do_error    If .true. then do error trapping for debugging        {init}
439a565
> c   do_parcel   If .true. then do parcel simulation                   {init}
444a571,572
> c   if_nuc_lh   Conditional array for nucleation latent heat          {setupaer}
> c   rlh_nuc     Nucleation latent heat                                {setupaer}
451a580,587
> c   ix          Current index for spatial grid, general east-west direction
> c   iy          Current index for spatial grid, general north-south direction
> c   iz          Current index for spatial grid, vertical direction
> c   ixy         Current index for spatial grid, linearized 2-D ix,iy (horizontal)
> c   ixyz        Current index for spatial grid, linearized 3-D ix,iy,iz 
> c   ntsubsteps  Number of time substeps for fast microphysics processes
> c   maxsubsteps Maximum number of time substeps allowed
> c   minsubsteps Maximum number of time substeps allowed
457c593
< c   groupname  Names of particle groups
---
> c   groupname  Names of particle elements
463,465c599,602
<      $        do_vtran, do_varstep, do_step, do_ccoef
<       logical do_error, sec_mom, if_nuc(MAXNELEM,MAXNELEM)
<       logical do_netcdf
---
>      $        is_grp_mixed, do_vtran, do_varstep, do_step, do_ccoef
>       logical do_error, sec_mom, if_nuc(NELEM,NELEM),
>      $        if_nuc_lh(NELEM,NELEM)
>       logical do_netcdf, do_parcel
467,468c604,605
<       character*(50) elemname(MAXNELEM), groupname(MAXNGRP)
<       character*(20) gasname(MAXNGAS), solname(MAXNSOLUTE)
---
>       character*(50) elemname(NELEM), groupname(NGROUP)
>       character*(20) gasname(NGAS), solname(NSOLUTE)
473,478c610,618
<      $  period_nuc, itime, igelem(MAXNELEM), itype(MAXNELEM),
<      $  nelemg(MAXNGRP), ncore(MAXNGRP), ishape(MAXNGRP),
<      $  ienconc(MAXNGRP), icoag(MAXNGRP,MAXNGRP),
<      $  icoagelem(MAXNELEM,MAXNGRP), ifall, icoagop, icollec, itbnd,
<      $  ibbnd, itbndpart, ibbndpart, itbndgas, ibbndgas, itbndtheta,
<      $  ibbndtheta, ihoradv, do_coag, do_grow, do_thermo, do_vtran,
---
>      $  period_nuc, maxsubsteps, minsubsteps, dtime_save,
>      $  sec_mom(NGROUP), rlh_nuc(NELEM,NELEM),
>      $  itime, ix, iy, iz, ixy, ixyz, ntsubsteps,
>      $  igelem(NELEM), itype(NELEM), icomp(NELEM), nelemg(NGROUP),
>      $  ncore(NGROUP),
>      $  ishape(NGROUP), ienconc(NGROUP), icoag(NGROUP,NGROUP),
>      $  icoagelem(NELEM,NGROUP), ifall, icoagop, icollec, itbnd,
>      $  ibbnd, itbnd_pc, ibbnd_pc, itbnd_gc, ibbnd_gc, itbnd_ptc,
>      $  ibbnd_ptc, ihoradv, do_coag, do_grow, do_thermo, do_vtran,
480,489c620,630
<      $  do_netcdf, if_nuc, ncdf_file, sec_mom(MAXNGRP),
<      $  imomelem(MAXNGRP), inucproc(MAXNELEM,MAXNELEM),
<      $  igrowgas(MAXNELEM), inucgas(MAXNGRP), nnuc2elem(MAXNELEM),
<      $  inuc2elem(5,MAXNELEM), ievp2elem(MAXNELEM),
<      $  is_grp_ice(MAXNGRP), inuc2bin(MAXNBINS,MAXNGRP,MAXNGRP),
<      $  isolelem(MAXNELEM), ievp2bin(MAXNBINS,MAXNGRP,MAXNGRP),
<      $  icorelem(MAXNELEM,MAXNELEM), nnucelem(MAXNELEM),
<      $  nnucbin(MAXNGRP,MAXNBINS,MAXNGRP),
<      $  inucelem(MAXNELEM,MAXNELEM*MAXNGRP),
<      $  inucbin(MAXNBINS*MAXNGRP,MAXNGRP,MAXNBINS,MAXNGRP),
---
>      $  do_netcdf, do_parcel, if_nuc, if_nuc_lh, ncdf_file, 
>      $  imomelem(NGROUP), inucproc(NELEM,NELEM),
>      $  igrowgas(NELEM), inucgas(NGROUP), nnuc2elem(NELEM),
>      $  inuc2elem(5,NELEM), ievp2elem(NELEM),
>      $  is_grp_ice(NGROUP), is_grp_mixed(NGROUP),
>      $  inuc2bin(NBIN,NGROUP,NGROUP),
>      $  isolelem(NELEM), ievp2bin(NBIN,NGROUP,NGROUP),
>      $  icorelem(NELEM,NELEM), nnucelem(NELEM),
>      $  nnucbin(NGROUP,NBIN,NGROUP), 
>      $  inucelem(NELEM,NELEM*NGROUP), 
>      $  inucbin(NBIN*NGROUP,NGROUP,NBIN,NGROUP),
517,518d657
< c   vcore     Volume concentration of core material [cm^3/cm^3]
< c   rmshell   Mass concentration of shell material [g/cm^3]
522,530c661,669
<      $  rmin(MAXNGRP), rmassmin(MAXNGRP), rmrat(MAXNGRP),
<      $  r(MAXNBINS,MAXNGRP), rmass(MAXNBINS,MAXNGRP),
<      $  vol(MAXNBINS,MAXNGRP), dr(MAXNBINS,MAXNGRP),
<      $  dm(MAXNBINS,MAXNGRP), dv(MAXNBINS,MAXNGRP),
<      $  rmassup(MAXNBINS,MAXNGRP), rup(MAXNBINS,MAXNGRP), 
<      $  rlow(MAXNBINS,MAXNGRP), 
<      $  diffmass(MAXNBINS,MAXNGRP,MAXNBINS,MAXNGRP),
<      $  rhop(MAXNX,MAXNY,MAXNZ,MAXNBINS,MAXNGRP),
<      $  rhoelem(MAXNELEM), eshape(MAXNGRP), vcore(MAXNXYZ,MAXNBINS),
---
>      $  rmin(NGROUP), rmassmin(NGROUP), rmrat(NGROUP),
>      $  r(NBIN,NGROUP), rmass(NBIN,NGROUP),
>      $  vol(NBIN,NGROUP), dr(NBIN,NGROUP),
>      $  dm(NBIN,NGROUP), dv(NBIN,NGROUP),
>      $  rmassup(NBIN,NGROUP), rup(NBIN,NGROUP), 
>      $  rlow(NBIN,NGROUP), 
>      $  diffmass(NBIN,NGROUP,NBIN,NGROUP),
>      $  rhop(NX,NY,NZ,NBIN,NGROUP),
>      $  rhoelem(NELEM), eshape(NGROUP),
539,540c678,680
< c   pc          Particle concentrations                     {initaer}
< c   gc          Gas concentrations [g/cm^3]                 {initgas}
---
> c   pc          Particle concentration                             {initaer}
> c   gc          Gas concentration [g/x_units/y_units/z_units]      {initgas}
> c   ptc         Potential temperature concentration [g K/x_units/y_units/z_units]
542,543d681
< c   rad_stuff   Radiation state
< c   irad4       Safety marker for common block rad4
546,547c684,686
<      $  pc(MAXNX,MAXNY,MAXNZ,MAXNBINS,MAXNELEM),
<      $  gc(MAXNX,MAXNY,MAXNZ,MAXNGAS),
---
>      $  pc(NX,NY,NZ,NBIN,NELEM),
>      $  gc(NX,NY,NZ,NGAS),
>      $  ptc(NX,NY,NZ),
550,552d688
<       common /rad4/
<      $  rad_stuff,
<      $  irad4
554d689
< c
558,562c693,698
<       dimension pc2(MAXNXY,MAXNZ,MAXNBINS,MAXNELEM)
<       dimension pc3(MAXNXYZ,MAXNBINS,MAXNELEM)
<       dimension pc4(MAXNPC4,MAXNELEM)
<       dimension pc5(MAXNPC5)
<       dimension rhop3(MAXNXYZ,MAXNBINS,MAXNGRP)
---
>       dimension pc2(NXY,NZ,NBIN,NELEM)
>       dimension pc3(NXYZ,NBIN,NELEM)
>       dimension pc4(NPC4,NELEM)
>       dimension pc5(NPC5)
>       dimension rhop2(NXY,NZ,NBIN,NGROUP)
>       dimension rhop3(NXYZ,NBIN,NGROUP)
567a704
>       equivalence( rhop2, rhop )
571c708
< c  Declare alias name for gc() with first 2, 3, 4, 5 dimensions treated linearly
---
> c  Declare alias name for gc() and ptc() with first 2, 3, 4, 5 dimensions treated linearly
573,574c710,713
<       dimension gc2(MAXNXY,MAXNZ,MAXNGAS)
<       dimension gc3(MAXNXYZ,MAXNGAS)
---
>       dimension gc2(NXY,NZ,NGAS)
>       dimension gc3(NXYZ,NGAS)
>       dimension ptc2(NXY,NZ)
>       dimension ptc3(NXYZ)
577a717,718
>       equivalence( ptc2, ptc )
>       equivalence( ptc3, ptc )
586a728
> c   pconmax     Maximum particle concentration for each grid point
587a730,733
> c   ptcl        Potential temperature concentration at beginning of time-step
> c   d_pc        Change in particle concentration due to transport
> c   d_gc        Change in gas concentration due to transport
> c   d_ptc       Change in potential temperature concentration due to transport
590a737
> c   dhor        Temporary storage of grid spacing for horizontal transport
601,602c748,749
< c   gpd         Gas production term
< c   gls         Gas loss rate
---
> c   gasprod     Gas production term
> c   rlheat      Latent heating rate [deg_K/s]
616,617d762
< c   rad_other   Secondary radiation variables
< c   irad5       Safety marker for common block rad5
623d767
< c   pc_precoag  Particle concentration for coagulation calculations
628,646c772,788
<      $  pcl(MAXNXYZ,MAXNBINS,MAXNELEM), gcl(MAXNXYZ,MAXNGAS), 
<      $  pcmax(MAXNELEM), cvert(MAXNZ), divcor(MAXNZ), chor(MAXNX),
<      $  coaglg(MAXNXYZ,MAXNBINS,MAXNGRP), 
<      $  coagpe(MAXNXYZ,MAXNBINS,MAXNELEM),
<      $  rnuclg(MAXNXYZ,MAXNBINS,MAXNGRP,MAXNGRP),
<      $  rnucpe(MAXNXYZ,MAXNBINS,MAXNELEM),
<      $  growlg(MAXNXYZ,MAXNBINS,MAXNGRP),
<      $  growpe(MAXNXYZ,MAXNBINS,MAXNELEM),
<      $  evaplg(MAXNXYZ,MAXNBINS,MAXNGRP),
<      $  evappe(MAXNXYZ,MAXNBINS,MAXNELEM),
<      $  gpd(MAXNXYZ,MAXNGAS), gls(MAXNXYZ,MAXNGAS),
<      $  vertdifd(MAXNZ+1), vertdifu(MAXNZ+1),
<      $  ftopgas(MAXNGAS), fbotgas(MAXNGAS),
<      $  ftoppart(MAXNBINS,MAXNELEM), fbotpart(MAXNBINS,MAXNELEM),
<      $  ftop, fbot, cmf(MAXNXYZ,MAXNBINS,MAXNGRP), 
<      $  totevap(MAXNXYZ,MAXNBINS,MAXNGRP), 
<      $  inucmin(MAXNGRP), inucstep(MAXNGRP),
<      $  rprod(MAXNZ), ppd, pls, advfld(MAXNBINS), vtd(MAXNBINS),
<      $  pc_precoag(MAXNXYZ,MAXNBINS,MAXNELEM),
---
>      $  pcl(NXYZ,NBIN,NELEM),
>      $  gcl(NXYZ,NGAS), ptcl(NXYZ), d_pc(NXYZ,NBIN,NELEM),
>      $  d_gc(NXYZ,NGAS), d_ptc(NXYZ),
>      $  pcmax(NELEM), cvert(NZ), divcor(NZ), chor(NXORNY),
>      $  dhor(NXORNY), pconmax(NXYZ,NGROUP),
>      $  coaglg(NXYZ,NBIN,NGROUP), coagpe(NXYZ,NBIN,NELEM),
>      $  rnuclg(NBIN,NGROUP,NGROUP), rnucpe(NBIN,NELEM),
>      $  growlg(NBIN,NGROUP), growpe(NBIN,NELEM),
>      $  evaplg(NBIN,NGROUP), evappe(NBIN,NELEM),
>      $  gasprod(NGAS), rlheat,
>      $  vertdifd(NZP1), vertdifu(NZP1),
>      $  ftopgas(NXY,NGAS), fbotgas(NXY,NGAS),
>      $  ftoppart(NXY,NBIN,NELEM), fbotpart(NXY,NBIN,NELEM),
>      $  ftop, fbot, cmf(NBIN,NGROUP), 
>      $  totevap(NBIN,NGROUP), 
>      $  inucmin(NGROUP), inucstep(NGROUP),
>      $  rprod(NZ), ppd, pls, advfld(NBIN), vtd(NBIN),
649,651d790
<       common /rad5/
<      $  rad_other,
<      $  irad5
652a792
> c  Declare alias name for <evappe> to collapse into one dimension
654c794
< c  Declare alias for <evappe> to collapse into one dimension.
---
>       dimension evappe5(NPC5,NGAS)
656,658d795
< c
<       dimension evappe5(MAXNPC5,MAXNGAS)
< c
671c808
< c   pkernel       Coagulation production variables      {updatecoag}
---
> c   pkernel       Coagulation production variables      {setupcoag}
687,699c824,836
<      $  ckernel(MAXNZ,MAXNBINS,MAXNBINS,MAXNGRP,MAXNGRP),
<      $  pkernel(MAXNZ,MAXNBINS,MAXNBINS,MAXNGRP,MAXNGRP,MAXNGRP,6),
<      $  volx(MAXNGRP,MAXNGRP,MAXNGRP,MAXNBINS,MAXNBINS),
<      $  ilow(MAXNGRP,MAXNBINS,MAXNBINS*MAXNBINS), 
<      $  jlow(MAXNGRP,MAXNBINS,MAXNBINS*MAXNBINS),
<      $  iup(MAXNGRP,MAXNBINS,MAXNBINS*MAXNBINS),
<      $  jup(MAXNGRP,MAXNBINS,MAXNBINS*MAXNBINS),
<      $  npairl(MAXNGRP,MAXNBINS),
<      $  npairu(MAXNGRP,MAXNBINS),
<      $  cbr_term0(MAXNZ,MAXNBINS,MAXNBINS,MAXNGRP,MAXNGRP),
<      $  cbr_term1(MAXNZ,MAXNBINS,MAXNBINS,MAXNGRP,MAXNGRP),
<      $  cbr_term2(MAXNZ,MAXNBINS,MAXNBINS,MAXNGRP,MAXNGRP),
<      $  pkern0(MAXNZ,MAXNBINS,MAXNBINS,MAXNGRP,MAXNGRP,MAXNGRP,6),
---
>      $  ckernel(NZ,NBIN,NBIN,NGROUP,NGROUP),
>      $  pkernel(NZ,NBIN,NBIN,NGROUP,NGROUP,NGROUP,6),
>      $  volx(NGROUP,NGROUP,NGROUP,NBIN,NBIN),
>      $  ilow(NGROUP,NBIN,NBIN*NBIN), 
>      $  jlow(NGROUP,NBIN,NBIN*NBIN),
>      $  iup(NGROUP,NBIN,NBIN*NBIN),
>      $  jup(NGROUP,NBIN,NBIN*NBIN),
>      $  npairl(NGROUP,NBIN),
>      $  npairu(NGROUP,NBIN),
>      $  cbr_term0(NZ,NBIN,NBIN,NGROUP,NGROUP),
>      $  cbr_term1(NZ,NBIN,NBIN,NGROUP,NGROUP),
>      $  cbr_term2(NZ,NBIN,NBIN,NGROUP,NGROUP),
>      $  pkern0(NZ,NBIN,NBIN,NGROUP,NGROUP,NGROUP,6),
715,718c852,855
<      $  iglow(MAXNGRP,MAXNBINS,MAXNBINS*MAXNBINS),
<      $  jglow(MAXNGRP,MAXNBINS,MAXNBINS*MAXNBINS),
<      $  igup(MAXNGRP,MAXNBINS,MAXNBINS*MAXNBINS),
<      $  jgup(MAXNGRP,MAXNBINS,MAXNBINS*MAXNBINS),
---
>      $  iglow(NGROUP,NBIN,NBIN*NBIN),
>      $  jglow(NGROUP,NBIN,NBIN*NBIN),
>      $  igup(NGROUP,NBIN,NBIN*NBIN),
>      $  jgup(NGROUP,NBIN,NBIN*NBIN),
725c862
< c  rates, and coagulation kernels.
---
> c  rates, and coagulation kernels
730c867,868
< c   htrans    Net horizontal transport rate at layer boundary       {horizont}
---
> c   re        Reynolds' number based on <vfall>                     {setupvfall}
> c   vf_const  Constant vertical fall velocity when ifall=0          {setupaer}
732a871,872
> c   htrans    Net horizontal transport rate at layer boundary       {horizont}
> c   hdiff     Horizontal diffusion coefficient at layer boundary    {horizont}
739,740d878
< c   re        Reynolds' number based on <vfall>                     {setupvfall}
< c   vf_const  Constant vertical fall velocity when ifall=0          {setupaer}
744,748c882,887
<      $  bpm(MAXNZ,MAXNBINS,MAXNGRP), vf(MAXNZ+1,MAXNBINS,MAXNGRP),
<      $  vtrans(MAXNZ+1), re(MAXNZ,MAXNBINS,MAXNGRP), vf_const,
<      $  vertadvu(MAXNZ+1), vertadvd(MAXNZ+1), htrans(MAXNX+1),
<      $  ca(2,MAXNX,MAXNY), cb(2,MAXNX,MAXNY), cd(2,MAXNX,MAXNY),
<      $  ce(2,MAXNX,MAXNY), cf(2,MAXNX,MAXNY), cg(2,MAXNX,MAXNY),
---
>      $  bpm(NZ,NBIN,NGROUP), vf(NZP1,NBIN,NGROUP),
>      $  vtrans(NZP1), re(NZ,NBIN,NGROUP), vf_const,
>      $  vertadvu(NZP1), vertadvd(NZP1), htrans(NXORNYP1),
>      $  hdiff(NXORNY), 
>      $  ca(2,NX,NY), cb(2,NX,NY), cd(2,NX,NY),
>      $  ce(2,NX,NY), cf(2,NX,NY), cg(2,NX,NY),
751a891,898
> c  Declare alias names for <rhostar> with first 2, 3 dimensions treated linearly
> c
>       dimension rhostar2(NXY,NZ), rhostar3(NXYZ)
> c
>       equivalence( rhostar2, rhostar )
>       equivalence( rhostar3, rhostar )
> c
> c
754a902
> c  Note: air density, winds, and diffusion coefficients are in scaled units
756,766c904,906
< c   alt       Altitude at top of layer [cm]                         {initatm}
< c   alt_mid   Altitude at layer mid-point [cm]                      {initatm}
< c   xc        Horizontal position at center of cell [cm]            {initatm}
< c   xu        Horizontal position at upper edge of cell [cm]        {initatm}
< c   xl        Horizontal position at lower edge of cell [cm]        {initatm}
< c   dx        Horizontal grid spacing                               {initatm}
< c   yc        Horizontal position at center of cell [cm]            {initatm}
< c   yu        Horizontal position at upper edge of cell [cm]        {initatm}
< c   yl        Horizontal position at lower edge of cell [cm]        {initatm}
< c   dy        Horizontal grid spacing                               {initatm}
< c   delz      Thickness of vertical layers [cm]                     {initatm}
---
> c   zbot      height of the bottom of the model [cm]                  {initatm}
> c   p_surf    surface pressure [dyne/cm^2]                            {initatm}
> c   p_top     Atmospheric pressure at top of model domain [dyne/cm^2] {initatm}
768c908
< c   rhoa      Air density at layer mid-pt [g/cm^3]                  {initatm}
---
> c   rhoa      Air density at layer mid-pt [g/x_units/y_units/z_units] {initatm}
770,778c910
< c   tfin      Air temperature at layer mid-pt [deg_K]               {initatm}
< c   pt        Air potential temperature at layer mid-pt [deg_K]     {initatm}
< c   ptli      Ice-liquid-equivalent potential temperature [deg_K]   {initatm}
< c   told      Temperature at beginning of time-step
< c   ptold
< c   ptliold
< c   alt_midold
< c   pold
< c   rhoaold
---
> c   t_surf    Air temperature at surface [deg_K]                      {initatm}
781,784c913,921
< c   w         Vertical wind speed at layer boundary [cm/s]          {initatm}
< c   u         East-west wind speed at layer center [cm/s]           {initatm}
< c   v         North-south wind speed at layer center [cm/s]         {initatm}
< c   dkv       Vertical diffusion coefficient at layer boundary [cm^2/s]
---
> c   w         Vertical wind speed at layer boundary [z_units/s]       {initatm}
> c   u         East-west wind speed at layer center [x_units/s]        {initatm}
> c   v         North-south wind speed at layer center [y_units/s]      {initatm}
> c   dkz       Vert diffusion coef at layer boundary [z_units^2/s]     {initatm}
> c   dkx       Horiz x diffusion coeff at layer boundary [x_units^2/s] {initatm}
> c   dky       Horiz y diffusion coeff at layer boundary [y_units^2/s] {initatm}
> c   told      Temperature at beginning of time-step
> c   pold      Pressure at beginning of time-step
> c   rhoaold   Air density at beginning of time-step
788,800c925,929
<      $  alt(MAXNX,MAXNY,MAXNZ+1), alt_mid(MAXNX,MAXNY,MAXNZ),
<      $  xc(MAXNX,MAXNY,MAXNZ), xl(MAXNX,MAXNY,MAXNZ),
<      $  xu(MAXNX,MAXNY,MAXNZ), yc(MAXNX,MAXNY,MAXNZ),
<      $  yl(MAXNX,MAXNY,MAXNZ), yu(MAXNX,MAXNY,MAXNZ),
<      $  delz(MAXNX,MAXNY,MAXNZ), dx, dy,
<      $  p(MAXNX,MAXNY,MAXNZ), rhoa(MAXNX,MAXNY,MAXNZ),
<      $  t(MAXNX,MAXNY,MAXNZ), pt(MAXNX,MAXNY,MAXNZ),
<      $  tfin(MAXNX,MAXNY,MAXNZ), ptli(MAXNX,MAXNY,MAXNZ),
<      $  told(MAXNXYZ), ptold(MAXNXYZ), ptliold(MAXNXYZ),
<      $  alt_midold(MAXNXYZ), pold(MAXNXYZ), rhoaold(MAXNXYZ),
<      $  rmu(MAXNZ), thcond(MAXNZ), w(MAXNX,MAXNY,MAXNZ+1),
<      $  u(MAXNX,MAXNY,MAXNZ), v(MAXNX,MAXNY,MAXNZ),
<      $  dkv(MAXNX,MAXNY,MAXNZ+1),
---
>      $  zbot, p(NX,NY,NZ), rhoa(NX,NY,NZ), p_surf(NX,NY), p_top(NX,NY),
>      $  t(NX,NY,NZ), told(NXYZ), pold(NXYZ), rhoaold(NXYZ),
>      $  rmu(NZ), thcond(NZ), w(NX,NY,NZP1), zmetold(NXYZ),
>      $  u(NX,NY,NZ), v(NX,NY,NZ), t_surf(NX,NY),
>      $  dkz(NX,NY,NZP1), dkx(NX,NY,NZP1), dky(NX,NY,NZP1),
804,805c933
< c  Declare alias names for alt, alt_mid, delz, p, rhoa, t, pt, w, dkv,
< c  and ptli() with first 2, 3 dimensions treated linearly
---
> c  Declare alias names for atm stuff with first 2, 3 dimensions treated linearly
807,816c935,945
<       dimension alt2(MAXNXY,MAXNZ+1), alt3(MAXNXYZ+MAXNXY)
<       dimension alt_mid2(MAXNXY,MAXNZ), alt_mid3(MAXNXYZ)
<       dimension delz2(MAXNXY,MAXNZ), delz3(MAXNXYZ)
<       dimension p2(MAXNXY,MAXNZ), p3(MAXNXYZ)
<       dimension t2(MAXNXY,MAXNZ), t3(MAXNXYZ)
<       dimension pt2(MAXNXY,MAXNZ), pt3(MAXNXYZ)
<       dimension ptli2(MAXNXY,MAXNZ), ptli3(MAXNXYZ)
<       dimension w2(MAXNXY,MAXNZ+1), w3(MAXNXYZ+MAXNXY)
<       dimension dkv2(MAXNXY,MAXNZ+1), dkv3(MAXNXYZ+MAXNXY)
<       dimension rhoa2(MAXNXY,MAXNZ), rhoa3(MAXNXYZ)
---
>       dimension p2(NXY,NZ), p3(NXYZ)
>       dimension t2(NXY,NZ), t3(NXYZ)
>       dimension u2(NXY,NZP1), u3(NXYZP1)
>       dimension v2(NXY,NZP1), v3(NXYZP1)
>       dimension w2(NXY,NZP1), w3(NXYZP1)
>       dimension dkx2(NXY,NZP1), dkx3(NXYZP1)
>       dimension dky2(NXY,NZP1), dky3(NXYZP1)
>       dimension dkz2(NXY,NZP1), dkz3(NXYZP1)
>       dimension rhoa2(NXY,NZ), rhoa3(NXYZ)
>       dimension p_surf2(NXY)
>       dimension p_top2(NXY)
818,823c947,968
<       equivalence( alt2, alt )
<       equivalence( alt3, alt )
<       equivalence( alt_mid2, alt_mid )
<       equivalence( alt_mid3, alt_mid )
<       equivalence( delz2, delz )
<       equivalence( delz3, delz )
---
>       equivalence( zl2, zl )
>       equivalence( zl3, zl )
>       equivalence( zc2, zc )
>       equivalence( zc3, zc )
>       equivalence( dz2, dz )
>       equivalence( dz3, dz )
>       equivalence( xc2, xc )
>       equivalence( xc3, xc )
>       equivalence( xl2, xl )
>       equivalence( xl3, xl )
>       equivalence( xu2, xu )
>       equivalence( xu3, xu )
>       equivalence( yc2, yc )
>       equivalence( yc3, yc )
>       equivalence( yl2, yl )
>       equivalence( yl3, yl )
>       equivalence( yu2, yu )
>       equivalence( yu3, yu )
>       equivalence( dx2, dx )
>       equivalence( dx3, dx )
>       equivalence( dy2, dy )
>       equivalence( dy3, dy )
830,833c975,978
<       equivalence( pt2, pt )
<       equivalence( pt3, pt )
<       equivalence( ptli2, ptli )
<       equivalence( ptli3, ptli )
---
>       equivalence( u2, u )
>       equivalence( u3, u )
>       equivalence( v2, v )
>       equivalence( v3, v )
836,837c981,998
<       equivalence( dkv2, dkv )
<       equivalence( dkv3, dkv )
---
>       equivalence( dkx2, dkx )
>       equivalence( dkx3, dkx )
>       equivalence( dky2, dky )
>       equivalence( dky3, dky )
>       equivalence( dkz2, dkz )
>       equivalence( dkz3, dkz )
>       equivalence( xmet2, xmet )
>       equivalence( xmet3, xmet )
>       equivalence( ymet2, ymet )
>       equivalence( ymet3, ymet )
>       equivalence( zmet2, zmet )
>       equivalence( zmet3, zmet )
>       equivalence( zmetl2, zmetl )
>       equivalence( zmetl3, zmetl )
>       equivalence( zmetold2, zmetold )
>       equivalence( zmetold3, zmetold )
>       equivalence( p_surf2, p_surf )
>       equivalence( p_top2, p_top )
842c1003
< c  Declare global common blocks for condensational growth parameters.
---
> c  Declare global common blocks for condensational growth parameters
848,856d1008
< c   ba        Constants for ice saturation vapor pressure [Buck, 1981]  
< c   bb
< c   bc
< c   bd
< c   be
< c   bal       liquid saturation vapor pressure constants
< c   bbl
< c   bcl
< c   bdl
863a1016
> c   ft        Ventilation factor                                  {setupgkern}
870c1023,1024
< c   supsatold Supersaturation (ice or liquid) before time-step    {prestep}
---
> c   supsatlold Supersaturation (liquid) before time-step    {prestep}
> c   supsatiold Supersaturation (ice) before time-step    {prestep}
874a1029
> c   iaer10   Safety marker for common block aer10
877,892c1032,1047
<      $  gwtmol(MAXNGAS), diffus(MAXNZ,MAXNGAS),
<      $  rlhe(MAXNZ,MAXNGAS), rlhm(MAXNZ,MAXNGAS),
<      $  ba,bb,bc,bd,bal,bbl,bcl,bdl,
<      $  pvapl(MAXNX,MAXNY,MAXNZ,MAXNGAS),
<      $  pvapi(MAXNX,MAXNY,MAXNZ,MAXNGAS),
<      $  surfctwa(MAXNZ), surfctiw(MAXNZ), surfctia(MAXNZ),
<      $  akelvin(MAXNZ,MAXNGAS), akelvini(MAXNZ,MAXNGAS),
<      $  gro(MAXNZ,MAXNBINS,MAXNGRP),
<      $  gro1(MAXNZ,MAXNBINS,MAXNGRP),
<      $  gro2(MAXNZ,MAXNBINS,MAXNGRP),
<      $  gvrat(MAXNBINS,MAXNELEM,MAXNGAS),
<      $  supsatl(MAXNX,MAXNY,MAXNZ,MAXNGAS),
<      $  supsati(MAXNX,MAXNY,MAXNZ,MAXNGAS),
<      $  supsatold(MAXNXYZ,MAXNGAS),
<      $  scrit(MAXNZ,MAXNBINS,MAXNGRP),
<      $  sol_ions(MAXNSOLUTE), solwtmol(MAXNSOLUTE), rhosol(MAXNSOLUTE),
---
>      $  gwtmol(NGAS), diffus(NZ,NGAS),
>      $  rlhe(NZ,NGAS), rlhm(NZ,NGAS),
>      $  pvapl(NX,NY,NZ,NGAS),
>      $  pvapi(NX,NY,NZ,NGAS),
>      $  surfctwa(NZ), surfctiw(NZ), surfctia(NZ),
>      $  akelvin(NZ,NGAS), akelvini(NZ,NGAS),
>      $  ft(NZ,NBIN,NGROUP),
>      $  gro(NZ,NBIN,NGROUP), 
>      $  gro1(NZ,NBIN,NGROUP), 
>      $  gro2(NZ,NGROUP), 
>      $  gvrat(NBIN,NELEM,NGAS),
>      $  supsatl(NX,NY,NZ,NGAS),
>      $  supsati(NX,NY,NZ,NGAS),
>      $  supsatlold(NXYZ,NGAS), supsatiold(NXYZ,NGAS),
>      $  scrit(NZ,NBIN,NGROUP),
>      $  sol_ions(NSOLUTE), solwtmol(NSOLUTE), rhosol(NSOLUTE),
899,904c1054,1059
<       dimension pvapl2(MAXNXY,MAXNZ,MAXNGAS), pvapl3(MAXNXYZ,MAXNGAS)
<       dimension pvapi2(MAXNXY,MAXNZ,MAXNGAS), pvapi3(MAXNXYZ,MAXNGAS)
<       dimension supsatl2(MAXNXY,MAXNZ,MAXNGAS)
<       dimension supsatl3(MAXNXYZ,MAXNGAS)
<       dimension supsati2(MAXNXY,MAXNZ,MAXNGAS)
<       dimension supsati3(MAXNXYZ,MAXNGAS)
---
>       dimension pvapl2(NXY,NZ,NGAS), pvapl3(NXYZ,NGAS)
>       dimension pvapi2(NXY,NZ,NGAS), pvapi3(NXYZ,NGAS)
>       dimension supsatl2(NXY,NZ,NGAS)
>       dimension supsatl3(NXYZ,NGAS)
>       dimension supsati2(NXY,NZ,NGAS)
>       dimension supsati3(NXYZ,NGAS)
918c1073
< c  Declare global common blocks for nucleation parameters.
---
> c  Declare global common blocks for nucleation parameters
923a1079
> c   iaer11   Safety marker for common block rad1 
927a1084,1156
> c
> c
> c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
> c
> c  Declare global common blocks for radiative transfer parameters
> c
> c   do_rad      If .true. then do radiative transfer                  {init}
> c   do_solar    If .true. then do solar calculations                  {init}
> c   do_ir       If .true. then do infrared calculations               {init}
> c   nrad        # of timesteps between radiation calcs (used when > 0)
> c   prad        Time period between radiation calcs (used when nrad < 0)
> c   isolar_zen  =I_FIXED: fixed, =I_DIURNAL: calculated every time step
> c   u0          cos( solar_zenith_angle )
> c   u0_fixed    Fixed value of cos( solar_zenith_angle )
> c   rad_start   solar time corresponding to <time> = 0 [s]
> c   zsin,zcos   sin and cos terms for solar zenith angle precalculation
> c   wave        Bin-center wavelengths [micron]
> c   radheat     Radiative heating rate [deg_K/s]
> c   qrad        Particle heating rate [deg_K/s]
> c   alb_tomi    Spectrally-integrated albedo at top-of-model
> c   alb_toai    Spectrally-integrated albedo at top-of-atmosphere
> c   alb_toa     Spectrally-resolved albedo at top-of-atmosphere
> c   opd         Spectrally-resolved optical depth
> c   fsl_up      Solar upwelling flux [W m^-2]
> c   fsl_dn      Solar downwelling flux [W m^-2]
> c   fir_up      Infrared upwelling flux [W m^-2]
> c   fir_dn      Infrared downwelling flux [W m^-2]
> c   irad1       Safety marker for common block rad1 
> c
>       logical do_rad, do_solar, do_ir
> 
>       common /rad1/
>      $  u0, u0_fixed, rad_start,
>      $  zsin(NX,NY), zcos(NX,NY), wave(NWAVE), 
>      $  qrad(NX,NY,NZ,NBIN,NGROUP), radheat(NX,NY,NZ),
>      $  alb_tomi(NX,NY), alb_toai(NX,NY),
>      $  alb_toa(NX,NY,NSOL), opd(NX,NY,NWAVE),
>      $  fsl_up(NX,NY,NZRADP1), fsl_dn(NX,NY,NZRADP1),
>      $  fir_up(NX,NY,NZRADP1), fir_dn(NX,NY,NZRADP1),
>      $  do_rad, do_solar, do_ir, nrad, prad, isolar_zen, 
>      $  irad1
> c
> c
> c  Declare alias names for radiative transfer parameters
> c  with first 2, 3 dimensions treated linearly
> c
>       dimension radheat2(NXY,NZ), radheat3(NXYZ)
>       dimension qrad2(NXY,NZ,NBIN,NGROUP), qrad3(NXYZ,NBIN,NGROUP)
>       dimension alb_tomi2(NXY)
>       dimension alb_toai2(NXY)
>       dimension alb_toa2(NXY,NSOL)
>       dimension opd2(NXY,NWAVE)
>       dimension fsl_up2(NXY,NZRADP1), fsl_up3(NXYZRADP1)
>       dimension fsl_dn2(NXY,NZRADP1), fsl_dn3(NXYZRADP1)
>       dimension fir_up2(NXY,NZRADP1), fir_up3(NXYZRADP1)
>       dimension fir_dn2(NXY,NZRADP1), fir_dn3(NXYZRADP1)
> c
>       equivalence( radheat2, radheat )
>       equivalence( radheat3, radheat )
>       equivalence( qrad2, qrad )
>       equivalence( qrad3, qrad )
>       equivalence( alb_tomi2, alb_tomi )
>       equivalence( alb_toai2, alb_toai )
>       equivalence( alb_toa2, alb_toa )
>       equivalence( opd2, opd )
>       equivalence( fsl_up2, fsl_up )
>       equivalence( fsl_up3, fsl_up )
>       equivalence( fsl_dn2, fsl_dn )
>       equivalence( fsl_dn3, fsl_dn )
>       equivalence( fir_up2, fir_up )
>       equivalence( fir_up3, fir_up )
>       equivalence( fir_dn2, fir_dn )
>       equivalence( fir_dn3, fir_dn )
